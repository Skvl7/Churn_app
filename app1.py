# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from pathlib import Path
import pickle

import streamlit as st
from PIL import Image
import pandas as pd

# ====================== –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ============================

# –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
# https://docs.streamlit.io/library/api-reference/utilities/st.set_page_config
st.set_page_config(
    layout='wide',
    initial_sidebar_state='auto',
    page_title='–û—Ç—Ç–æ–∫ app',
    page_icon='üßä',
)


# ----------- —Ñ—É–Ω–∫—Ü–∏–∏ -------------------------------------

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–∏–∫–∏ —Å –¥–∏—Å–∫–∞
# –∫—ç—à–∏—Ä—É–µ–º –∏–Ω–∞—á–µ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—Å—è –∑–∞–Ω–æ–≤–æ
@st.cache_data
def load_image(image_path):
    image = Image.open(image_path)
    return image

# —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
# –∫—ç—à–∏—Ä—É–µ–º –∏–Ω–∞—á–µ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—Å—è –∑–∞–Ω–æ–≤–æ
@st.cache_data
def load_model(model_path):
    # –∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    with open(model_path, 'rb') as f:
        model = pickle.load(f)
    return model


# ------------- –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –º–æ–¥–µ–ª–∏ ---------

# –ø—É—Ç—å –¥–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏
image_path = 'main_page_image.jpg'
image = load_image(image_path)

# –ø—É—Ç—å –¥–æ –º–æ–¥–µ–ª–∏
model_path = 'cat_model.pkl'
churn_model = load_model(model_path)


# ---------- –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ ------------------------
st.write(
    """
    ### –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã
    –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """
)

# –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
st.image(image, width=600)


# ====================== –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö ===============

st.sidebar.header('–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')

# —Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
features = dict(
    Customer_Age = '–í–æ–∑—Ä–∞—Å—Ç',
    Gender = '–ö–∞–∫ –¥–∞–≤–Ω–æ –∫–ª–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∫—Ä–µ–¥–∏—Ç–Ω—É—é –∫–∞—Ä—Ç—É (–º–µ—Å.)',
    Marital_Status = '–°–µ–º–µ–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å',
    Card_Category = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã',
    Months_on_book = '–ö–∞–∫ –¥–∞–≤–Ω–æ –∫–ª–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∫—Ä–µ–¥–∏—Ç–Ω—É—é –∫–∞—Ä—Ç—É (–º–µ—Å.)',
    Total_Relationship_Count = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –±–∞–Ω–∫–µ',
    Months_Inactive_12_mon = '–°–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ –∫–ª–∏–µ–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞',
    Contacts_Count_12_mon = '–ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º',
    Credit_Limit = '–ö—Ä–µ–¥–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç',
    Total_Revolving_Bal = '–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º—ã–π –±–∞–ª–∞–Ω—Å',
    Total_Amt_Chng_Q4_Q1 = '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞ Q4/Q1',
    Total_Trans_Ct = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
    Total_Ct_Chng_Q4_Q1 = '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π Q4/Q1'
)

# —Å–ª–æ–≤–∞—Ä–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏
gender_label_to_index = {'Female': 0, 'Male': 1}
ms_label_to_index = {
    'Divorced': 0,
    'Married': 1,
    'Single': 2}
card_label_to_index = {
    'Blue': 0,
    'Gold': 1,
    'Platinum': 2,
    'Silver': 3}

# –∫–Ω–æ–ø–∫–∏ - —Å–ª–∞–π–¥–µ—Ä—ã –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ–ª–æ–≤–µ–∫–∞
Gender = st.sidebar.radio(features['Gender'], gender_label_to_index.keys(), horizontal=True)
Marital_Status = st.sidebar.radio(features['Marital_Status'], ms_label_to_index.keys(), horizontal=True)
Card_Category = st.sidebar.radio(features['Card_Category'], card_label_to_index.keys(), horizontal=True)
Customer_Age = st.sidebar.slider(features['Customer_Age'], min_value=26, max_value=73, value=42, step=1)
Months_on_book = st.sidebar.slider(features['Months_on_book'], min_value=26, max_value=73, value=5, step=1)
Total_Relationship_Count = st.sidebar.slider(features['Total_Relationship_Count'], min_value=1, max_value=6, value=2, step=1)
Months_Inactive_12_mon = st.sidebar.slider(features['Months_Inactive_12_mon'], min_value=0, max_value=6, value=2, step=1)
Contacts_Count_12_mon = st.sidebar.slider(features['Contacts_Count_12_mon'], min_value=0, max_value=6, value=2, step=1)
Credit_Limit = st.sidebar.slider(features['Credit_Limit'], min_value=1400, max_value=34510, value=3000, step=1)
Total_Revolving_Bal = st.sidebar.slider(features['Total_Revolving_Bal'], min_value=0, max_value=2517, value=1000, step=1)
Total_Amt_Chng_Q4_Q1 = st.sidebar.slider(features['Total_Amt_Chng_Q4_Q1'], min_value=0, max_value=4, value=2, step=1)
Total_Trans_Ct = st.sidebar.slider(features['Total_Trans_Ct'], min_value=10, max_value=139, value=100, step=1)
Total_Ct_Chng_Q4_Q1 = st.sidebar.slider(features['Total_Ct_Chng_Q4_Q1'], min_value=0, max_value=4, value=2, step=1)


# –∑–∞–ø–∏—Å–∞—Ç—å –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å –∏ –≤ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º
data_df = pd.DataFrame([dict(
    Gender=gender_label_to_index[Gender],
    Marital_Status=ms_label_to_index[Marital_Status],
    Card_Category=card_label_to_index[Card_Category],
    Customer_Age=Customer_Age,
    Months_on_book=Months_on_book,
    Total_Relationship_Count=Total_Relationship_Count,
    Months_Inactive_12_mon=Months_Inactive_12_mon,
    Contacts_Count_12_mon=Contacts_Count_12_mon,
    Credit_Limit=Credit_Limit,
    Total_Revolving_Bal=Total_Revolving_Bal,
    Total_Amt_Chng_Q4_Q1=Total_Amt_Chng_Q4_Q1,
    Total_Trans_Ct=Total_Trans_Ct,
    Total_Ct_Chng_Q4_Q1=Total_Ct_Chng_Q4_Q1,
)])


# =========== –≤—ã–≤–æ–¥ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ ==========

# –≤—ã–≤–µ—Å—Ç–∏ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
st.write("##### –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ")
st.write(data_df)


# –ø—Ä–µ–¥–∏–∫—Ç –º–æ–¥–µ–ª—å—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–∞ –≤—ã—Ö–æ–¥–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–∏–∞–±–µ—Ç–∞
churn_prob = churn_model.predict_proba(data_df.values)[0, 1]


# –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
st.write("##### –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞")
st.write(f'{churn_prob:.2f}')